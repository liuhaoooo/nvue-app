<template>
  <view class="home-container" :render-whole="true">
    <!-- menu -->
    <view class="menu">
      <view class="item_container" style="opacity:0" ref="menu1">
        <u-cell-group :border="false">
          <i-cell title="DHCP" icon="2" />
          <i-cell title="DHCP" icon="2" />
        </u-cell-group>
      </view>
      <view class="item_container" style="opacity:0" ref="menu2">
        <i-cell title="DHCP" icon="2" />
        <i-cell title="DHCP" icon="2" />
      </view>
      <view class="item_container" style="opacity:0" ref="menu3">
        <i-cell title="DHCP" icon="2" />
        <i-cell title="DHCP" icon="2" />
      </view>
      <view class="item_container" style="opacity:0" ref="menu4">
        <i-cell title="DHCP" icon="2" />
        <i-cell title="DHCP" icon="2" />
      </view>
      <view class="item_container" style="opacity:0" ref="menu5">
        <i-cell title="DHCP" icon="2" />
        <i-cell title="DHCP" icon="2" />
      </view>
    </view>
    <!-- main -->
    <view class="home-content" ref="main" @click="closeMenu">
      <view class="home-header">
        <view class="navbar-content" @click="logout">
          <u-icon name="setting" size="16" color="#f4f4f5"></u-icon>
          <text class="nav-text" style="margin-left: 10rpx">退出</text>
        </view>
        <text class="nav-text-mid">我的路由器</text>
        <view class="navbar-content" @click="openMenu">
          <text class="nav-text" style="margin-right: 10rpx">更多</text>
          <u-icon name="arrow-down" size="16" color="#f4f4f5"></u-icon>
        </view>
      </view>
      <view>
        <view class="out" ref="out">
          <view class="in" @click="to('INFO')">
            <text class="in-text">网络正常</text>
          </view>
        </view>
        <u-gap height="60"></u-gap>
        <u-line></u-line>
      </view>
      <view class="home-footer">
        <view class="home-footer-item">
          <u-icon @click="to('NETWORK')" name="setting" color="#12a086" size="30" label="上网设置" labelPos="bottom"
            labelColor="#f4f4f5" space="10px"></u-icon>
        </view>
        <view class="home-footer-item">
          <u-icon @click="to('WIFI_INDEX')" name="wifi" color="#12a086" size="30" label="Wi-Fi设置" labelPos="bottom"
            labelColor="#f4f4f5" space="10px"></u-icon>
        </view>
        <view class="home-footer-item">
          <u-icon @click="to('TOOLS')" name="grid" color="#12a086" size="30" label="工具箱" labelPos="bottom"
            labelColor="#f4f4f5" space="10px"></u-icon>
        </view>
      </view>
    </view>
  </view>
</template>

<script>
  const Binding = uni.requireNativePlugin('bindingx');
  const domModule = weex.requireModule('dom');
  export default {
    data() {
      return {
        _menuOpen: false,
      }
    },
    onReady() {
      this.color()
    },
    onUnload() {
      try {
        Binding.unbindAll()
      } catch (error) { }
    },
    methods: {
      to(url) {
        uni.navigateTo({ url: getApp().$router[url] })
      },
      logout() {
        uni.showModal({
          title: '提示',
          content: '确定要退出登陆吗？',
          success: (res) => {
            if (res.confirm) {
              uni.reLaunch({
                url: getApp().$router.LOGIN,
              });
            }
          }
        });
      },
      getEl(el) {
        if (typeof el === 'string' || typeof el === 'number') return el;
        if (WXEnvironment) {
          return el.ref;
        } else {
          return el instanceof HTMLElement ? el : el.$el;
        }
      },
      openMenu() {
        let page = this.getEl(this.$refs.main);
        let width = uni.upx2px(750);
        let result = Binding.bind({
          eventType: 'timing',
          exitExpression: 't>200',
          props: [{
            element: page,
            property: 'transform.translateX',
            expression: 'linear(t, 0, 260, 200)'
          }, {
            element: page,
            property: 'transform.scale',
            expression: 'linear(t, 1, -0.2, 200)'
          }]
        }, (e) => {
          if (e.state === 'exit') {
            if (result) {
              Binding.unbind({
                token: result.token,
                eventType: 'timing'
              });
            }
            this._menuOpen = true
            this.showMenu();
          }
        });
      },
      closeMenu() {
        if (!this._menuOpen) return
        let page = this.getEl(this.$refs.main);
        let result = Binding.bind({
          eventType: 'timing',
          exitExpression: 't>200',
          props: [{
            element: page,
            property: 'transform.translateX',
            expression: 'linear(t, 260, -260, 200)'
          }, {
            element: page,
            property: 'transform.scale',
            expression: 'linear(t, 0.8, 0.2, 200)'
          }]
        }, (e) => {
          if (e.state === 'exit' && this._menuOpen) {
            if (result) {
              Binding.unbind({
                token: result.token,
                eventType: 'timing'
              });
            }
            this._menuOpen = false
          }
        });
      },
      showMenu() {
        let menu1 = this.getEl(this.$refs.menu1);
        let menu2 = this.getEl(this.$refs.menu2);
        let menu3 = this.getEl(this.$refs.menu3);
        let menu4 = this.getEl(this.$refs.menu4);
        let menu5 = this.getEl(this.$refs.menu5);
        let duration = 1000; //ms
        let parallax = 50;
        Binding.bind({
          eventType: 'timing',
          exitExpression: {
            origin: `t>${duration * 5}`
          },
          props: [{
            element: menu1,
            property: 'transform.translateY',
            expression: {
              origin: `easeOutElastic(t,0,0-100,${duration})`
            }
          },
          {
            element: menu2,
            property: 'transform.translateY',
            expression: {
              origin: `t<${parallax}?0:easeOutElastic(t,0,0-100,${duration - parallax})`
            }
          },
          {
            element: menu3,
            property: 'transform.translateY',
            expression: {
              origin: `t<${parallax * 2}?0:easeOutElastic(t,0,0-100,${duration - parallax * 2})`
            }
          },
          {
            element: menu4,
            property: 'transform.translateY',
            expression: {
              origin: `t<${parallax * 3}?0:easeOutElastic(t,0,0-100,${duration - parallax * 3})`
            }
          },
          {
            element: menu5,
            property: 'transform.translateY',
            expression: {
              origin: `t<${parallax * 4}?0:easeOutElastic(t,0,0-100,${duration - parallax * 4})`
            }
          },
          // opacity
          {
            element: menu1,
            property: 'opacity',
            expression: {
              origin: `easeOutElastic(t,0,1,${duration})`
            }
          },
          {
            element: menu2,
            property: 'opacity',
            expression: {
              origin: `t<${parallax}?0:easeOutElastic(t,0,1,${duration - parallax})`
            }
          },
          {
            element: menu3,
            property: 'opacity',
            expression: {
              origin: `t<${parallax * 2}?0:easeOutElastic(t,0,1,${duration - parallax * 2})`
            }
          },
          {
            element: menu4,
            property: 'opacity',
            expression: {
              origin: `t<${parallax * 3}?0:easeOutElastic(t,0,1,${duration - parallax * 3})`
            }
          },
          {
            element: menu5,
            property: 'opacity',
            expression: {
              origin: `t<${parallax * 4}?0:easeOutElastic(t,0,1,${duration - parallax * 4})`
            }
          }
          ]
        });
      },
      // 渐变
      color() {
        this.$nextTick(() => {
          domModule.getComponentRect(this.$refs.out, option => {
            this.orderBinding = Binding.bind({
              eventType: 'timing',
              exitExpression: 't>3000',
              props: [{
                element: this.getEl(this.$refs.out),
                property: 'background-color',
                expression: {
                  origin: 'evaluateColor("#00ffdd", "#e100ff", min(t, 3000)/3000)'
                }
              }],
            }, (res) => {
              if (res.state === 'exit') {
                Binding.unbind({
                  token: this.orderBinding,
                  eventType: 'timing',
                });
                this.color_back()
              }
            });
          });
        })
      },
      color_back() {
        this.orderBinding = Binding.bind({
          eventType: 'timing',
          exitExpression: 't>3000',
          props: [{
            element: this.getEl(this.$refs.out),
            property: 'background-color',
            expression: {
              origin: 'evaluateColor("#e100ff", "#00ffdd", min(t, 3000)/3000)'
            }
          }],
        }, (res) => {
          if (res.state === 'exit') {
            Binding.unbind({
              token: this.orderBinding,
              eventType: 'timing',
            });
            this.color()
          }
        });
      },
    }
  }
</script>

<style scoped>

</style>