<template>
  <view class="home-container" :render-whole="true">
    <!-- menu -->
    <view class="menu">
      <view class="item_container" style="opacity:0" ref="menu1">
        <text class="item">Menu1</text>
      </view>
      <view class="item_container" style="opacity:0" ref="menu2">
        <text class="item">Menu2</text>
      </view>
      <view class="item_container" style="opacity:0" ref="menu3">
        <text class="item">Menu3</text>
      </view>
      <view class="item_container" style="opacity:0" ref="menu4">
        <text class="item">Menu4</text>
      </view>
      <view class="item_container" style="opacity:0" ref="menu5">
        <text class="item">Menu5</text>
      </view>
    </view>
    <!-- main -->
    <view class="home-content" ref="main" @touchstart="onTouchStart">
      <view class="home-header">
        <view class="navbar-content" @click="logout">
          <u-icon name="setting" size="16" color="#f4f4f5"></u-icon>
          <text class="nav-text" style="margin-left: 10rpx">退出</text>
        </view>
        <text class="nav-text-mid">我的路由器</text>
        <view class="navbar-content" @click="expandWithDrag">
          <text class="nav-text" style="margin-right: 10rpx">更多</text>
          <u-icon name="arrow-down" size="16" color="#f4f4f5"></u-icon>
        </view>
      </view>
      <view>
        <view class="out">
          <view class="in" @click="to('INFO')">
            <text class="in-text">网络正常</text>
          </view>
        </view>
        <u-gap height="60"></u-gap>
        <u-line></u-line>
      </view>
      <view class="home-footer">
        <view class="home-footer-item">
          <u-icon @click="to('NETWORK')" name="setting" color="#12a086" size="30" label="上网设置" labelPos="bottom"
            labelColor="#f4f4f5" space="10px"></u-icon>
        </view>
        <view class="home-footer-item">
          <u-icon @click="to('WIFI_INDEX')" name="wifi" color="#12a086" size="30" label="Wi-Fi设置" labelPos="bottom"
            labelColor="#f4f4f5" space="10px"></u-icon>
        </view>
        <view class="home-footer-item">
          <u-icon @click="to('TOOLS')" name="grid" color="#12a086" size="30" label="工具箱" labelPos="bottom"
            labelColor="#f4f4f5" space="10px"></u-icon>
        </view>
      </view>
    </view>
  </view>
</template>

<script>
  const Binding = uni.requireNativePlugin('bindingx');
  const domModule = weex.requireModule('dom');
  export default {
    data() {
      return {
        _is_expanded: false,
        _menu_animation_flag: false,
        _opacity: 0
      }
    },
    methods: {
      to(url) {
        uni.navigateTo({ url: getApp().$router[url] })
      },
      logout() {
        uni.showModal({
          title: '提示',
          content: '确定要退出登陆吗？',
          success: function (res) {
            if (res.confirm) {
              uni.reLaunch({
                url: getApp().$router.LOGIN,
              });
            }
          }
        });
      },
      getEl: function (el) {
        if (typeof el === 'string' || typeof el === 'number') return el;
        if (WXEnvironment) {
          return el.ref;
        } else {
          return el instanceof HTMLElement ? el : el.$el;
        }
      },
      onTouchStart: function () {
        if (!this._is_expanded) {
          this.expandWithDrag();
        } else {
          this.collapseWithDrag();
        }
      },
      expandWithDrag: function () {
        var self = this;
        let page = this.getEl(this.$refs.main);
        let width = uni.upx2px(750);
        let result = Binding.bind({
          // eventType: 'timing',
          // exitExpression: 't>3000',
          // props: [{
          //   element: page,
          //   property: 'transform.translateX',
          //   expression: 'linear(t, 0,' + (width - 100) + ',3000)'
          // },
          // {
          //   element: page,
          //   property: 'transform.scaleX',
          //   expression: '1-min(260,max(0,x))/260*0.2'
          // },
          // {
          //   element: page,
          //   property: 'transform.scaleY',
          //   expression: '1-min(260,max(0,x))/260*0.2'
          // }]
          eventType: 'pan',
          anchor: page,
          props: [{
            element: page,
            property: 'transform.translateX',
            expression: {
              origin: 'min(260,max(0,x))'
            }
          },
          {
            element: page,
            property: 'transform.scaleX',
            expression: {
              origin: '1-min(260,max(0,x))/260*0.2' //1-->0.8
            }
          },
          {
            element: page,
            property: 'transform.scaleY',
            expression: {
              origin: '1-min(260,max(0,x))/260*0.2'
            }
          }
          ]
        }, function (e) {
          if (e.state === 'end' && !self._is_expanded) {
            let offset = e.deltaX;
            if (offset < 260 / 2 && offset > 0) {
              self.collapseWithAnimation();
            } else if (offset >= 260 / 2) {
              self.expandWithAnimation();
            }
            if (result) {
              Binding.unbind({
                token: result.token,
                eventType: 'pan'
              });
            }
          }
        });
      },
      collapseWithDrag: function () {
        var self = this;
        let page = this.getEl(this.$refs.main);
        let result = Binding.bind({
          eventType: 'pan',
          anchor: page,
          props: [{
            element: page,
            property: 'transform.translateX',
            expression: {
              origin: '260+min(0,max(0-260,x))'
            }
          },
          {
            element: page,
            property: 'transform.scaleX',
            expression: {
              origin: '0.8-min(0,max(0-260,x))/260*0.2'
            }
          },
          {
            element: page,
            property: 'transform.scaleY',
            expression: {
              origin: '0.8-min(0,max(0-260,x))/260*0.2'
            }
          }
          ]
        }, function (e) {
          if (e.state === 'end' && self._is_expanded) {
            let offset = Math.abs(e.deltaX);
            if (offset < 260 / 2 && offset > 0) {
              self.expandWithAnimation();
            } else if (offset >= 260 / 2 && offset <= 260) {
              self.collapseWithAnimation();
            }
            if (result) {
              Binding.unbind({
                token: result.token,
                eventType: 'pan'
              });
            }
          }
        });
      },
      collapseWithAnimation: function () {
        this._is_expanded = false;
        this._menu_animation_flag = false;
        let page = this.getEl(this.$refs.main);;
        let offset = Binding.getComputedStyle(page).translateX;
        let duration = 200; //ms
        let scale = Binding.getComputedStyle(page).scaleX;
        let self = this;
        Binding.bind({
          eventType: 'timing',
          exitExpression: {
            origin: `t>${duration}`
          },
          props: [{
            element: page,
            property: 'transform.translateX',
            expression: {
              origin: `easeOutCubic(t,${offset},${0 - offset},${duration})`
            }
          },
          {
            element: page,
            property: 'transform.scaleX',
            expression: {
              origin: `easeOutCubic(t,${scale},${1 - scale},${duration})`
            }
          },
          {
            element: page,
            property: 'transform.scaleY',
            expression: {
              origin: `easeOutCubic(t,${scale},${1 - scale},${duration})`
            }
          }
          ]
        }, function (e) { })
      },
      expandWithAnimation: function () {
        let self = this;
        this._is_expanded = true;
        let page = this.getEl(this.$refs.main);
        let offset = Binding.getComputedStyle(page).translateX;
        let duration = 200; //ms
        let scale = Binding.getComputedStyle(page).scaleX;
        Binding.bind({
          eventType: 'timing',
          exitExpression: {
            origin: `t>${duration}`
          },
          props: [{
            element: page,
            property: 'transform.translateX',
            expression: {
              origin: `easeOutCubic(t,${offset},${260 - offset},${duration})`
            }
          },
          {
            element: page,
            property: 'transform.scaleX',
            expression: {
              origin: `easeOutCubic(t,${scale},${0.8 - scale},${duration})` //scale-->1
            }
          },
          {
            element: page,
            property: 'transform.scaleY',
            expression: {
              origin: `easeOutCubic(t,${scale},${0.8 - scale},${duration})` //scale-->1
            }
          }
          ]
        }, function (e) {
          if (e.state === 'exit' && !self._menu_animation_flag) {
            self.showMenu();
            self._menu_animation_flag = true;
          }
        })
      },
      showMenu: function () {
        let menu1 = this.getEl(this.$refs.menu1);
        let menu2 = this.getEl(this.$refs.menu2);
        let menu3 = this.getEl(this.$refs.menu3);
        let menu4 = this.getEl(this.$refs.menu4);
        let menu5 = this.getEl(this.$refs.menu5);
        let duration = 1000; //ms
        let parallax = 50;
        Binding.bind({
          eventType: 'timing',
          exitExpression: {
            origin: `t>${duration * 5}`
          },
          props: [{
            element: menu1,
            property: 'transform.translateY',
            expression: {
              origin: `easeOutElastic(t,0,0-100,${duration})`
            }
          },
          {
            element: menu2,
            property: 'transform.translateY',
            expression: {
              origin: `t<${parallax}?0:easeOutElastic(t,0,0-100,${duration - parallax})`
            }
          },
          {
            element: menu3,
            property: 'transform.translateY',
            expression: {
              origin: `t<${parallax * 2}?0:easeOutElastic(t,0,0-100,${duration - parallax * 2})`
            }
          },
          {
            element: menu4,
            property: 'transform.translateY',
            expression: {
              origin: `t<${parallax * 3}?0:easeOutElastic(t,0,0-100,${duration - parallax * 3})`
            }
          },
          {
            element: menu5,
            property: 'transform.translateY',
            expression: {
              origin: `t<${parallax * 4}?0:easeOutElastic(t,0,0-100,${duration - parallax * 4})`
            }
          },
          // opacity
          {
            element: menu1,
            property: 'opacity',
            expression: {
              origin: `easeOutElastic(t,0,1,${duration})`
            }
          },
          {
            element: menu2,
            property: 'opacity',
            expression: {
              origin: `t<${parallax}?0:easeOutElastic(t,0,1,${duration - parallax})`
            }
          },
          {
            element: menu3,
            property: 'opacity',
            expression: {
              origin: `t<${parallax * 2}?0:easeOutElastic(t,0,1,${duration - parallax * 2})`
            }
          },
          {
            element: menu4,
            property: 'opacity',
            expression: {
              origin: `t<${parallax * 3}?0:easeOutElastic(t,0,1,${duration - parallax * 3})`
            }
          },
          {
            element: menu5,
            property: 'opacity',
            expression: {
              origin: `t<${parallax * 4}?0:easeOutElastic(t,0,1,${duration - parallax * 4})`
            }
          }
          ]
        });
      }
    }
  }
</script>

<style scoped>
  .menu {
    width: 250;
    position: absolute;
    top: 0;
    bottom: 0;
    justify-content: center;
    align-items: center;
    margin-top: 10;
    margin-bottom: 10;
  }

  .item {
    color: #ffffff;
    font-size: 30;
  }

  .item_container {
    height: 60;
    width: 250;
    justify-content: center;
    align-items: center;
    margin-top: 35;
  }
</style>