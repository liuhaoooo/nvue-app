<template>
    <view class="app">
        <list class="list" ref="list">
            <cell>
                <view class="header">
                    <view class="header_bg_wrapper">
                    </view>
                    <view class="header_card">
                        <view class="card_wrapper">
                            <view class="card_content" style="background-color:#ffffff">
                            </view>
                        </view>
                    </view>
                </view>
            </cell>

            <cell v-for="c in cells">
                <view class="card_wrapper">
                    <view class="card_content" />
                </view>
            </cell>
        </list>

        <view class="app_bar" ref="app_bar">
            <view class="app_bar_bg" ref="app_bar_bg" />

            <view class="nav_wrapper">
                <text class="nav_title">Title</text>
            </view>

            <view class="tab_wrapper_container">
                <view class="tab_wrapper" v-for="tab in fake_tabs">
                    <text class="tab">{{tab}}</text>
                </view>
            </view>
        </view>

    </view>
</template>

<style>
    .app {
        flex: 1;
        justify-content: center;
        align-items: center;
        background-color: #E0E0E0;
    }

    .list {
        flex-direction: column;
        overflow: hidden;
        width: 750upx;
        background-color: #f2f3f4;
        position: absolute;
        left: 0;
        top: 0;
        right: 0;
        bottom: 0;
    }

    .header_bg {
        width: 750upx;
        height: 500upx;
    }

    .header_bg_wrapper {
        width: 750upx;
        height: 600upx;
        position: absolute;
        top: 0;
        background: #f2f3f4;
    }

    .header {
        width: 750upx;
        height: 600upx;
    }

    .header_card {
        margin-top: 330upx;
    }

    .app_bar {
        width: 750upx;
        height: 250upx;
        position: absolute;
        top: 50;
    }

    .app_bar_bg {
        width: 750upx;
        height: 200upx;
        background-color: #03A9F4;
        position: absolute;
        top: 0;
        opacity: 0;
    }

    .card_wrapper {
        width: 750upx;
        height: 250upx;
        margin-top: 20upx;
        justify-content: center;
        align-items: center;
        background-color: transparent;
    }

    .card_content {
        border-radius: 25;
        width: 710upx;
        height: 250upx;
        background-color: #ffffff;

    }

    .nav_wrapper {
        width: 750upx;
        height: 100upx;
        align-items: center;
        background-color: transparent;
        flex-direction: row;
    }

    .nav_title {
        font-size: 35upx;
        font-weight: bold;
        margin-left: 250upx;
        color: #ffffff;
    }

    .nav_back {
        width: 40upx;
        margin-left: 20upx;
        height: 40upx;
    }

    .tab_wrapper_container {
        width: 750upx;
        height: 100upx;
        align-items: center;
        background-color: transparent;
        flex-direction: row;
    }

    .tab_wrapper {
        width: 125upx;
        height: 100upx;
        align-items: center;
        justify-content: center;
    }

    .tab {
        font-size: 25upx;
        color: #ffffff;
    }
</style>

<script>
    const Binding = uni.requireNativePlugin('bindingx');
    const domModule = weex.requireModule('dom');
    export default {
        data() {
            return {
                fake_tabs: [
                    'Tab1',
                    'Tab2',
                    'Tab3',
                    'Tab4',
                    'Tab5',
                    'Tab6'
                ],
                cells: [1, 2, 3, 4, 5, 6, 7, 8, 9]
            }
        },
        mounted() {

            let self = this;
            let list = this.getEl(self.$refs.list);
            let target_app_bar = this.getEl(self.$refs.app_bar);
            let target_bg = this.getEl(self.$refs.app_bar_bg);

            Binding.bind({
                eventType: 'scroll',
                anchor: list,
                props: [{
                    element: target_bg,
                    property: 'opacity',
                    expression: {
                        origin: 'min(100,y)/100'
                    }
                },
                {
                    element: target_app_bar,
                    property: 'transform.translateY',
                    expression: {
                        origin: 'y<100?0:(0-min(y-100,100))'
                    }
                }
                ]
            });
        },
        methods: {

            getEl: function (e) {
                return e.ref;
            }

        }
    }
</script>