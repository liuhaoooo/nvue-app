<template>
  <view class="menu">
    <view class="item_container" style="opacity:0" ref="menu1">
      <i-cell title="DHCP" icon="2" />
      <i-cell title="DHCP" icon="2" />
    </view>
    <view class="item_container" style="opacity:0" ref="menu2">
      <i-cell title="DHCP" icon="2" />
      <i-cell title="DHCP" icon="2" />
    </view>
    <view class="item_container" style="opacity:0" ref="menu3">
      <i-cell title="DHCP" icon="2" />
      <i-cell title="DHCP" icon="2" />
    </view>
    <view class="item_container" style="opacity:0" ref="menu4">
      <i-cell title="DHCP" icon="2" />
      <i-cell title="DHCP" icon="2" />
    </view>
    <view class="item_container" style="opacity:0" ref="menu5">
      <i-cell title="DHCP" icon="2" />
      <i-cell title="DHCP" icon="2" />
    </view>
  </view>
</template>

<script>
  const Binding = uni.requireNativePlugin('bindingx');
  const domModule = weex.requireModule('dom');
  export default {
    data() {
      return {

      }
    },
    methods: {
      getEl: function (e) {
        return e.ref;
      },
      showMenu: function () {
        let menu1 = this.getEl(this.$refs.menu1);
        let menu2 = this.getEl(this.$refs.menu2);
        let menu3 = this.getEl(this.$refs.menu3);
        let menu4 = this.getEl(this.$refs.menu4);
        let menu5 = this.getEl(this.$refs.menu5);
        let duration = 1000; //ms
        let parallax = 50;
        Binding.bind({
          eventType: 'timing',
          exitExpression: {
            origin: `t>${duration * 5}`
          },
          props: [{
            element: menu1,
            property: 'transform.translateY',
            expression: {
              origin: `easeOutElastic(t,0,0-100,${duration})`
            }
          },
          {
            element: menu2,
            property: 'transform.translateY',
            expression: {
              origin: `t<${parallax}?0:easeOutElastic(t,0,0-100,${duration - parallax})`
            }
          },
          {
            element: menu3,
            property: 'transform.translateY',
            expression: {
              origin: `t<${parallax * 2}?0:easeOutElastic(t,0,0-100,${duration - parallax * 2})`
            }
          },
          {
            element: menu4,
            property: 'transform.translateY',
            expression: {
              origin: `t<${parallax * 3}?0:easeOutElastic(t,0,0-100,${duration - parallax * 3})`
            }
          },
          {
            element: menu5,
            property: 'transform.translateY',
            expression: {
              origin: `t<${parallax * 4}?0:easeOutElastic(t,0,0-100,${duration - parallax * 4})`
            }
          },
          // opacity
          {
            element: menu1,
            property: 'opacity',
            expression: {
              origin: `easeOutElastic(t,0,1,${duration})`
            }
          },
          {
            element: menu2,
            property: 'opacity',
            expression: {
              origin: `t<${parallax}?0:easeOutElastic(t,0,1,${duration - parallax})`
            }
          },
          {
            element: menu3,
            property: 'opacity',
            expression: {
              origin: `t<${parallax * 2}?0:easeOutElastic(t,0,1,${duration - parallax * 2})`
            }
          },
          {
            element: menu4,
            property: 'opacity',
            expression: {
              origin: `t<${parallax * 3}?0:easeOutElastic(t,0,1,${duration - parallax * 3})`
            }
          },
          {
            element: menu5,
            property: 'opacity',
            expression: {
              origin: `t<${parallax * 4}?0:easeOutElastic(t,0,1,${duration - parallax * 4})`
            }
          }
          ]
        });
      }
    }
  }
</script>

<style>
  .menu {
    width: 250;
    position: absolute;
    top: 0;
    bottom: 0;
    justify-content: center;
    align-items: center;
    margin-top: 10;
    margin-bottom: 10;
  }

  .item {
    color: #ffffff;
    font-size: 30;
  }

  .item_container {
    width: 250;
    justify-content: center;
    align-items: center;
  }
</style>